<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_60289_cmdb_edito.CMDBEditor</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMDBEditor</name>
        <script><![CDATA[var CMDBEditor = Class.create();
CMDBEditor.prototype = {
	initialize: function(/*optional*/ gr) {
		this._gr = gr || current || null;

		this.cmdbConfigurationTableName = 'x_60289_cmdb_edito_cmdb_editor_configuration';
		this.cmdbStagedChangeTableName = 'x_60289_cmdb_edito_cmdb_editor_staged_change';
		this.cmdbAllowedRelationshipTable = 'x_60289_cmdb_edito_cmdb_editor_allowed_relationship';

		this.approvalTable = 'sysapproval_approver';
		this.groupTable = 'sys_user_group';
		this.groupMemberTable = 'sys_user_grmember';

		this.userFieldList = 'user_fields_with_edit_rights';
		this.groupFieldList = 'group_fields_with_edit_rights';

		this._userIsAdmin = gs.hasRole('x_60289_cmdb_edito.cmdb_admin') || gs.hasRole('admin');
	},

	type: 'CMDBEditor',

	getClassFieldQuery: function() {
		if (this._userIsAdmin)
			return '';

		var gr = new GlideRecord(this.cmdbConfigurationTableName), retArr = [];
		gr.query();
		while (gr.next()) {
			if (this.getEditableRecords(this.getConfigurationObject(gr), true))
				retArr.push(gr.sys_id.toString());			
		}

		if (retArr.length > 0) {
			return 'sys_idIN' + retArr.join(',');
		}
		else
			return 'sys_id=-1';
	},

	getActiveStagedChangeForUser: function(gr) {
		if (!gr && this._gr)
			gr = this._gr;
		else
			return false;

		var grStaged = new GlideRecord(this.cmdbStagedChangeTableName);
		grStaged.addQuery('configuration_item', this._gr.sys_id.toString());
		grStaged.addQuery('submitter', gs.getUser().getID());
		grStaged.addQuery('approval', 'IN', 'requested,not_requested');
		grStaged.query();

		return (grStaged.next()) ? grStaged : false;
	},

	getAllActiveChangeCIsForUser: function(userSys) {
		if (!userSys)
			return [];

		var grStaged = new GlideRecord(this.cmdbStagedChangeTableName);
		grStaged.addQuery('submitter', userSys);
		grStaged.addQuery('approval', 'IN', 'requested,not_requested');
		grStaged.addNullQuery('completed_on');
		grStaged.query();

		var retArr = [];
		while(grStaged.next())
			retArr.push(grStaged.configuration_item.toString());

		return retArr;
	},

	_getRecordFromSysAndTable: function(sys, table) {
		if (!sys || !/\w{32}/.test(sys))
			return false;
		if (!table)
			return false;

		var gr = new GlideRecord(table);
		if (gr.get(sys))
			return gr;

		return false;
	},

	canEditInPortal: function(sys, table) {
		if (this.getActiveStagedChangeForUser())
			return false;

		if (this._userIsAdmin)
			return true;

		var x, userSys = gs.getUserID(), userGroups = this.getUsersGroups(userSys), gr;
		if (sys && /\w{32}/.test(sys) && table && !this._gr)
			gr = this._getRecordFromSysAndTable(sys, table);
		else if (this._gr)
			gr = this._gr;
		else
			return false;

		var grConfig = new GlideRecord(this.cmdbConfigurationTableName);
		grConfig.addQuery('ci_class.name', gr.getTableName());
		grConfig.query();

		while (grConfig.next()) {
			var userFields = this.buildUserFields(grConfig, this.userFieldList);
			var groupFields = this.buildUserFields(grConfig, this.groupFieldList);
			if ((!userFields || userFields.length == 0) && (!groupFields || groupFields.length == 0))
				return true;

			for (x in userFields) {
				if (!!~(gr[userFields[x]] + '').indexOf(userSys))
					return true;
			}

			for (x in groupFields) {
				if (!!~userGroups.indexOf(gr[groupFields[x]] + ''))
					return true;
			}
		}

		return false;
	},

	commitChanges: function(sys) {
		var gr;
		if (/\w{32}/.test(sys)) {
			gr = new GlideRecord(this.getStagedChangeTable());
			if (!gr.get(sys))
				return false;
		}
		else if (typeof sys == 'object' && sys.getTableName)
			gr = sys;

		var grCI = new GlideRecord(this.getTableNameFromSys(gr.cmdb_editor_configuration.ci_class.toString()));
		if (grCI.get(gr.configuration_item.toString())) {
			var parsedChanges = JSON.parse(gr.staged_changes.toString());
			if (parsedChanges) {
				var editableSelected = parsedChanges.editableSelected;
				if (editableSelected) {
					var editableColumns = editableSelected.editableColumns;
					var editableRelationships = editableSelected.editableRelationships;
					for (var x in editableColumns) {
						grCI[editableColumns[x].name] = editableColumns[x].value;
					}
					//for (var y in editableRelationships) {
					this._updateRelationship(editableRelationships, grCI.sys_id.toString());
					//}
					grCI.update();
					gr.approval = 'approved';
					gr.completed_on = new GlideDateTime();
					gr.update();
				}
			}
		}
	},

	_addRelationship: function(parent, child, type) {
		if (!parent || !child || !type)
			return false;

		var grRel = new GlideRecord('cmdb_rel_ci');
		grRel.addQuery('parent', parent);
		grRel.addQuery('child', child);
		grRel.addQuery('type', type);
		grRel.query();

		if (grRel.hasNext())
			return true;
		else {
			grRel.initialize();
			grRel.parent = parent;
			grRel.child = child;
			grRel.type = type;
			return grRel.insert();
		}
	},

	_removeRelationship: function(parent, child, type) {
		if (!parent || !child || !type)
			return false;

		var grRel = new GlideRecord('cmdb_rel_ci');
		grRel.addQuery('parent', parent);
		grRel.addQuery('child', child);
		grRel.addQuery('type', type);
		grRel.query();

		if (grRel.hasNext())
			grRel.deleteMultiple();
	},

	_updateRelationship: function (relOb, ciSys) {
		if (!relOb || !ciSys)
			return false;

		var x =0, y = 0, tmpRelOb;
		// update parents
		for (x in relOb.parent) {
			for (y in relOb.parent[x]) {
				if (relOb.parent[x][y].sys_id) {
					tmpRelOb = relOb.parent[x][y];
					if (relOb.parent[x][y].updated) {
						this._commitUpdatedRelationship('parent', tmpRelOb.old_related_item_sys, tmpRelOb.related_item_sys,
														tmpRelOb.old_sys_id, tmpRelOb.sys_id, tmpRelOb.relType);
					}
					else if (tmpRelOb.added)
						this._addRelationship(ciSys, tmpRelOb.sys_id, tmpRelOb.relType);
					else if (tmpRelOb.deleted)
						this._removeRelationship(ciSys, tmpRelOb.sys_id, tmpRelOb.relType);
				}
			}
		}

		x = 0;
		y = 0;

		// update children
		for (x in relOb.child) {
			for (y in relOb.child[x]) {
				if (relOb.child[x][y].sys_id) {
					tmpRelOb = relOb.child[x][y];
					if (tmpRelOb.updated) {
						this._commitUpdatedRelationship('child', tmpRelOb.old_related_item_sys, tmpRelOb.related_item_sys,
														tmpRelOb.old_sys_id, tmpRelOb.sys_id, tmpRelOb.relType);
					}
					else if (tmpRelOb.added)
						this._addRelationship(tmpRelOb.sys_id, ciSys, tmpRelOb.relType);
					else if (tmpRelOb.deleted)
						this._removeRelationship(tmpRelOb.sys_id, ciSys, tmpRelOb.relType);
				}
			}
		}
	},

	_commitUpdatedRelationship: function(type, oldRelatedItem, newRelatedItem, oldValue, newValue, relType) {
		if (!type || !oldRelatedItem || ! newRelatedItem || !oldValue || !newValue)
			return false;

		var grRel = new GlideRecord('cmdb_rel_ci');
		grRel.addQuery(type, oldRelatedItem);

		if (type == 'parent')
			grRel.addQuery('child', oldValue);
		else
			grRel.addQuery('parent', oldValue);

		grRel.query();
		if (grRel.next()) {
			grRel[type] = newRelatedItem;
			if (type == 'parent')
				grRel.child = newValue;
			else
				grRel.parent = newValue;
			grRel.type = relType;
			grRel.update();
		}
	},

	setApprovalForMe: function(sys, approved) {
		var gr = new GlideRecord('sysapproval_approver'), success;
		gr.addQuery('document_id', sys);
		gr.addQuery('approver', gs.getUserID());
		gr.addQuery('state', 'requested');
		gr.query();
		if (gr.next()) {
			gr.state = (approved) ? 'approved' : 'rejected';
			success = gr.update();
		}

		if (success) {
			gr = new GlideRecord('sysapproval_approver');
			gr.addQuery('document_id', sys);
			gr.addQuery('approver', '!=', gs.getUserID());
			gr.query();
			while (gr.next()) {
				gr.state = 'not_required';
				gr.update();
			}

			var grStaged = new GlideRecord(this.getStagedChangeTable());
			if (grStaged.get(sys)) {
				grStaged.approval = (approved) ? 'approved' : 'rejected';
				grStaged.update();
			}

			if (approved) {
				this.commitChanges(sys);
			}

			return true;
		}

		return false;
	},

	getExistingRecordsForCI: function(sys) {
		var name = this.getStagedChangeTable();
		var grStaging = new GlideRecord(name), retArr = [];
		//grStaging.addQuery('committed', 'false');
		//grStaging.addQuery('approval', 'IN', 'pending,not_requested');
		grStaging.addNullQuery('completed_on');
		grStaging.addQuery('configuration_item', sys);
		grStaging.query();
		while (grStaging.next()) {
			var tmp = {};
			tmp.submittedDate = grStaging.sys_updated_on.getDisplayValue();
			tmp.submitter = grStaging.submitter.getDisplayValue();
			tmp.sys_id = grStaging.sys_id.toString();
			tmp.state = (grStaging.committed.toString() == 'true') ? 'Committed by' : 'Drafted by';
			retArr.push(tmp);
		}

		return retArr;
	},

	getConfigurationSysForClassName: function(className) {
		var gr = new GlideRecord('sys_db_object'), grConf;
		if (gr.get('name', className)) {
			grConf = new GlideRecord(this.getBaseConfigTable());
			if (grConf.get('ci_class', gr.sys_id)) {
				return grConf.sys_id.toString();
			}
			else {
				var gr2 = new GlideRecord('sys_db_object');
				var parents = this.getAllParentTables(className);
				parents = parents.reverse();
				gr2.addQuery('name', 'IN', parents);
				gr2.query();
				while (gr2.next()) {
					grConf = new GlideRecord(this.getBaseConfigTable());
					if (grConf.get('ci_class', gr2.sys_id))
						return grConf.sys_id.toString();
				}
			}
		}

		return '';
	},

	submitChanges: function(jsonChanges, existingRecord, boolCommitted) {
		try {
			if (!jsonChanges)
				return false;

			var gr = new GlideRecord(this.getStagedChangeTable()), successful = false;
			if (existingRecord) {
				if (gr.get(existingRecord)) {
					gr.staged_changes = jsonChanges;
					gr.committed = boolCommitted;
					if (this._userIsAdmin)
						this.commitChanges(gr);
					else if (gr.approval.toString() == 'not_requested' && boolCommitted)
						this.sendForApprovals(gr);

					successful = gr.update();
				}
			}
			else {
				gr.initialize();
				gr.staged_changes = jsonChanges;
				gr.submitter = gs.getUserID();

				var tmpJsonOb = JSON.parse(jsonChanges);
				gr.cmdb_editor_configuration = tmpJsonOb.selectedClass.editorConfigSys;
				gr.configuration_item = tmpJsonOb.selectedClass.curSysID;

				gr.committed = boolCommitted;
				successful = gr.insert();

				if (boolCommitted) {
					if (this._userIsAdmin)
						this.commitChanges(successful);
					else {
						var gr2 = new GlideRecord(this.getStagedChangeTable());
						if(gr2.get(successful))
							if (gr2.approval.toString() == 'not_requested')
								this.sendForApprovals(gr2);
					}
				}
			}		

			return successful;
		}
		catch(err) {
			gs.error('Error in CMDBEditor: ' + err);
			return false;
		}
	},

	createApprovals: function(grStaged) {
		if (!grStaged)
			return false;

		var userSysArr = [], name, currentUserSys = gs.getUserID();

		var groups = grStaged.cmdb_editor_configuration.group_fields_with_approval_rights.toString();
		var users  = grStaged.cmdb_editor_configuration.user_fields_with_approval_rights.toString();

		if (groups) {
			var tmpArr = [];
			if (groups.indexOf(',') > -1) {
				var splitGroups = groups.split(',');
				for (var x in splitGroups) {
					name = this.getFieldNameFromSys(splitGroups[x]);
					if (grStaged.configuration_item[name])
						tmpArr.push(grStaged.configuration_item[name].toString());
				}
			}
			var grMember = new GlideRecord(this.groupMemberTable);
			grMember.addQuery('group', 'IN', tmpArr.join(','));
			grMember.addQuery('user.active', true);
			grMember.query();
			while(grMember.next())
				if (userSysArr.indexOf(grMember.sys_id.toString()) == -1 && grMember.sys_id.toString() != currentUserSys)
					userSysArr.push(grMember.sys_id.toString());
		}

		if (users) {
			if (users.indexOf(',') > -1) {
				users = users.split(',');
				for (var x in users) {
					name = this.getFieldNameFromSys(users[x]);
					if (grStaged.configuration_item[name])
						if (userSysArr.indexOf(grStaged.configuration_item[name].toString()) == -1 && grStaged.configuration_item[name].toString() != currentUserSys)
							userSysArr.push(grStaged.configuration_item[name].toString());
				}
			}
			else {
				name = this.getFieldNameFromSys(users);
				if (grStaged.configuration_item[name])
					if (userSysArr.indexOf(grStaged.configuration_item[name].toString()) == -1 && grStaged.configuration_item[name].toString() != currentUserSys)
						userSysArr.push(grStaged.configuration_item[name].toString());
			}
		}

		for (var y in userSysArr) {
			if (userSysArr[y] != currentUserSys) {
				var grApp = new GlideRecord(this.approvalTable);
				grApp.initialize();
				grApp.source_table = this.getStagedChangeTable();
				grApp.document_id = grStaged.sys_id.toString();
				grApp.approver = userSysArr[y];
				grApp.state = 'requested';
				grApp.insert();
			}
		}

		if (userSysArr) {
			grStaged.approval = 'requested';
			grStaged.update();
			return true;
		}
		else
			this.commitChanges(grStaged);

		return false;
	},

	areApprovalsNeeded: function(grStaged) {
		if (!grStaged)
			return false;

		return (grStaged.cmdb_editor_configuration.group_fields_with_approval_rights.toString() ||
				grStaged.cmdb_editor_configuration.user_fields_with_approval_rights.toString());
	},

	sendForApprovals: function(grStaged) {
		if (!grStaged)
			return false;

		if (this.areApprovalsNeeded(grStaged))
			return this.createApprovals(grStaged);
		else
			this.commitChanges(grStaged);
	},

	getBaseConfigTable: function() {
		return this.cmdbConfigurationTableName;
	},

	getStagedChangeTable: function() {
		return this.cmdbStagedChangeTableName;
	},

	getAllParentTables: function(baseTable, retArr) {
		if (!baseTable)
			return [];

		if (!retArr)
			retArr = [];

		var curTableGR = this.getTableFromName(baseTable);
		if (!curTableGR.super_class)
			return retArr;
		else {
			retArr.push(curTableGR.super_class.name.toString());
			return this.getAllParentTables(curTableGR.super_class.name.toString(), retArr);
		}
	},

	getAllChildTables: function(baseTable, retArr) {
		if (!baseTable)
			return [];

		if (!retArr)
			retArr = [];

		if (!~retArr.indexOf(baseTable))
			retArr.push(baseTable);

		var curTableGR = this.getChildTables(baseTable);
		if (curTableGR && curTableGR.hasNext())
			while(curTableGR.next())		
				this.getAllChildTables(curTableGR.name.toString(), retArr);

		return retArr;
	},

	getChildTables: function(tbl) {
		if (!tbl)
			return false;

		var grTbl = new GlideRecord('sys_db_object');
		grTbl.addQuery('super_class.name', tbl);
		grTbl.query();
		return grTbl;
	},

	tableIsParentOf: function(parTable, curTable) {
		var retBool = false;
		var curTableGR = this.getTableFromName(curTable);
		if (!curTableGR.super_class)
			return false;

		if (parTable == curTableGR.super_class.name.toString())
			return true;
		else
			return this.tableIsParentOf(parTable, curTableGR.super_class.name.toString());
	},

	buildFieldChoiceArray: function(fldName, tableName) {
		if (!fldName || !tableName)
			return [];

		var grChoice, retArr = [], tmpOb;
		grChoice = new GlideRecord('sys_choice');
		grChoice.addQuery('name', tableName);
		grChoice.addQuery('element', fldName);
		grChoice.addQuery('inactive', 'false');
		grChoice.addQuery('language', gs.getSession().getLanguage());
		grChoice.query();

		if (grChoice.hasNext()) {
			while(grChoice.next()) {
				tmpOb = {};
				tmpOb.label = grChoice.label.toString();
				tmpOb.value = grChoice.value.toString();
				tmpOb.sequence = parseInt(grChoice.sequence.toString(), 10);
				retArr.push(tmpOb);
			}
		}
		else {
			var parentTablesArr = this.getAllParentTables(tableName);
			if (!parentTablesArr)
				return [];

			grChoice = new GlideRecord('sys_choice');
			grChoice.addQuery('name', 'IN', parentTablesArr.join(','));
			grChoice.addQuery('element', fldName);
			grChoice.addQuery('inactive', 'false');
			grChoice.addQuery('language', gs.getSession().getLanguage());
			grChoice.query();

			while(grChoice.next()) {
				tmpOb = {};
				tmpOb.label = grChoice.label.toString();
				tmpOb.value = grChoice.value.toString();
				tmpOb.sequence = parseInt(grChoice.sequence.toString(), 10);
				retArr.push(tmpOb);
			}
		}

		return retArr;
	},

	getDisplayFieldForTable: function(tableName) {
		var grDict = new GlideRecord('sys_dictionary');
		grDict.addQuery('name', tableName);
		grDict.addQuery('display', 'true');
		grDict.query();
		if (grDict.next()) {
			return grDict.element.toString();
		}
		else
			return (!!~tableName.indexOf('cmdb')) ? 'name' : this._returnDisplayName(tableName);
	},

	_returnDisplayName: function(tbl) {
		var retStr = '';
		switch(tbl) {
			case 'sys_user_group':
				retStr = 'name';
				break;
		}

		return retStr;
	},

	getDisplayType: function(ob) {
		if (!ob)
			return 'text';

		if (ob.typeName == 'integer')
			return 'number';

		if (!!~ob.typeName.indexOf('string'))
			return 'text';

		if (ob.typeName == 'reference')
			return 'reference';
	},

	buildFieldObject: function(fldName, tableName, getChoices) {
		if (!fldName || !tableName)
			return {};

		var grDict = new GlideRecord('sys_dictionary'), retOb = {};
		grDict.addQuery('name', tableName);
		grDict.addQuery('element', fldName);
		grDict.query();
		if (grDict.next()) {
			retOb.name = fldName;
			retOb.label = grDict.column_label.toString();
			retOb.typeName = grDict.internal_type.toString();
			retOb.typeText = grDict.internal_type.getDisplayValue();
			retOb.reference = grDict.reference.toString();
			if (retOb.reference)
				retOb.displayField = this.getDisplayFieldForTable(retOb.reference);

			retOb.valueField = 'sys_id';
			retOb.qualType = grDict.use_reference_qualifier.toString();

			if (retOb.qualType == 'simple')
				retOb.refQual = grDict.reference_qual_condition.toString();
			else if (retOb.qualType == 'dynamic')
				retOb.refQual = grDict.dynamic_ref_qual.toString();
			else if (retOb.qualType == 'advanced')
				retOb.refQual = grDict.reference_qual.toString();
			else
				retOb.refQual = '';

			if ((retOb.typeName == 'integer' || !!~retOb.typeName.indexOf('string')) && getChoices)
				retOb.choices = this.buildFieldChoiceArray(fldName, tableName);
			else
				retOb.choices = [];

			retOb.displayType = this.getDisplayType(retOb);

			if (retOb.choices && retOb.choices.length > 0) {
				retOb.valueField = 'choice_value';
				retOb.displayType = 'choice';
			}			

			return retOb;
		}
		else
			return {};
	},

	getFieldNameFromSys: function(sys) {
		var grDict = new GlideRecord('sys_dictionary');
		if (grDict.get('sys_id', sys)) {
			return grDict.element.toString();
		}
		else
			return '';
	},

	getAvailableFields: function(gr, /*optional*/ fieldArr, /*optional*/ tableName) {
		var retArr = [];
		if (!gr && !fieldArr)
			return retArr;

		var fldArr;

		if (!fieldArr) {
			var fldStr = gr.editable_fields.toString();

			if (fldStr.indexOf(',') > -1)
				fldArr = fldStr.split(',');
			else
				fldArr = [fldStr];
		}
		else
			fldArr = fieldArr;

		var x = 0, maxL = fldArr.length;
		for (x; x < maxL; x++) {
			var tmpOb;

			if (!fieldArr)
				tmpOb = this.buildFieldObject(this.getFieldNameFromSys(fldArr[x]), this.getTableNameFromSys(gr.ci_class.toString()), false);
			else
				tmpOb = this.buildFieldObject(fldArr[x], tableName, true);

			tmpOb.value = (gr[tmpOb.name]) ? gr[tmpOb.name].toString() : '';
			tmpOb.display = (gr[tmpOb.name]) ? gr[tmpOb.name].getDisplayValue() : '';
			//Copy to determine changes
			tmpOb.oldValue = (gr[tmpOb.name]) ? gr[tmpOb.name].toString() : '';
			tmpOb.oldDisplay = (gr[tmpOb.name]) ? gr[tmpOb.name].getDisplayValue() : '';

			if (tmpOb.displayType == 'number') {
				tmpOb.value = parseInt(tmpOb.value.toString(), 10);
				tmpOb.oldValue = parseInt(tmpOb.oldValue.toString(), 10);
			}
			retArr.push(tmpOb);
		}

		return retArr;
	},

	getRelationshipNameFromSys: function(sys) {
		var grRelType = new GlideRecord('cmdb_rel_type');
		if (grRelType.get(sys)) {
			return grRelType.name.toString();
		}
		else
			return '';
	},

	getAvailableRelationships: function(gr) {
		var retArr = [], grRel = new GlideRecord(this.cmdbAllowedRelationshipTable);
		grRel.addQuery('cmdb_editor_configuration', gr.sys_id.toString());
		grRel.query();
		while (grRel.next()) {
			var tmpOb = {}, tmpClassArr, tmpRelArr, x = 0, maxL;
			tmpOb.classes = [];
			if (grRel.ci_classes) {
				if (grRel.ci_classes.toString().indexOf(',') > -1)
					tmpClassArr = grRel.ci_classes.toString().split(',');
				else
					tmpClassArr = [grRel.ci_classes.toString()];

				maxL = tmpClassArr.length;
				x = 0;
				for (x; x < maxL; x++) {
					var tmpObClass = {};
					tmpObClass.sys_id = tmpClassArr[x];
					tmpObClass.name = this.getTableNameFromSys(tmpClassArr[x]);
					tmpOb.classes.push(tmpObClass);
				}
			}
			tmpOb.parentChild = grRel.relationship_to_configuration_entry.toString() == 'parent' ? 'parent' : 'child';
			tmpOb.relationships = [];
			if (grRel.allowed_relationship_types) {
				if (grRel.allowed_relationship_types.toString().indexOf(',') > -1) {
					tmpRelArr = grRel.allowed_relationship_types.toString().split(',');
				}
				else {
					tmpRelArr = [grRel.allowed_relationship_types.toString()];
				}

				maxL = tmpRelArr.length;
				x = 0;
				for (x; x < maxL; x++) {
					var tmpObRel = {};
					tmpObRel.sys_id = tmpRelArr[x];
					tmpObRel.name = this.getRelationshipNameFromSys(tmpRelArr[x]);
					tmpOb.relationships.push(tmpObRel);
				}
			}
			retArr.push(tmpOb);
		}

		return retArr;
	},

	buildUserFields: function(gr, fieldName) {
		if (!gr || !fieldName)
			return [];

		var retArr = [], tmpArr;
		if (gr[fieldName] && gr[fieldName].toString() != '') {
			if (gr[fieldName].toString().indexOf(',') > -1) {
				tmpArr = gr[fieldName].toString().split(',');
			}
			else {
				tmpArr = [gr[fieldName].toString()];
			}

			var x = 0, maxL = tmpArr.length;
			for (x; x < maxL; x++) {
				retArr.push(this.getFieldNameFromSys(tmpArr[x]));
			}
		}
		return retArr;
	},

	getConfigurationObject: function(gr) {
		var ob = {};
		ob.name = gr.getDisplayValue();
		ob.classSys = gr.ci_class.toString();
		ob.className = this.getTableNameFromSys(ob.classSys);
		ob.displayField = this.getDisplayFieldForTable(ob.className);
		ob.availableFields = this.getAvailableFields(gr);
		ob.availableRelationships = this.getAvailableRelationships(gr);
		ob.userFields = this.buildUserFields(gr, this.userFieldList);
		ob.groupFields = this.buildUserFields(gr, this.groupFieldList);
		ob.getChildren = gr.allow_extended_tables.toString() == 'true';
		return ob;
	},

	getUsersGroups: function(sys) {
		var grMember = new GlideRecord('sys_user_grmember'), retArr = [];
		grMember.addQuery('user', sys);
		grMember.query();
		while (grMember.next()) {
			retArr.push(grMember.group.toString());
		}

		return retArr;
	},

	getEditableRecords: function(selectedClass, noReturn, userSysID) {
		if (!selectedClass || !selectedClass.className)
			return [];

		var userSys = userSysID || gs.getUserID(), x, retArr = [], userGroups = this.getUsersGroups(userSys);
		if (userGroups) {
			if (userGroups.length > 1)
				userGroups = userGroups.join(',');
			else
				userGroups = userGroups[0];
		}

		//install_statusNOT IN1
		var grClass = new GlideRecord(selectedClass.className), userQ = '', groupQ = '', fullQ = '';
		var activeChanges = this.getAllActiveChangeCIsForUser(userSys);
		if (activeChanges && activeChanges.length > 0)
			activeChanges = activeChanges.join(',');

		if (!this._userIsAdmin) {
			if (selectedClass.userFields) {
				for (x = 0; x < selectedClass.userFields.length; x++) {
					userQ += selectedClass.userFields[x] + '=' + userSys;
					if (selectedClass.userFields[x+1])
						userQ += '^OR';
				}

				fullQ = userQ;
				if (fullQ && activeChanges)
					fullQ += '^sys_idNOT IN' + activeChanges;
			}
			if (selectedClass.groupFields && userGroups) {
				if (fullQ)
					fullQ += '^NQ';

				for (x = 0; x < selectedClass.groupFields.length; x++) {
					groupQ += selectedClass.groupFields[x] + '.sys_idIN' + userGroups;
					if (selectedClass.groupFields[x+1])
						groupQ += '^OR';
				}

				fullQ += groupQ;
				if (activeChanges)
					fullQ += '^sys_idNOT IN' + activeChanges;
			}

			grClass.addEncodedQuery(fullQ);
		}

		if (!selectedClass.getChildren)
			grClass.addQuery('sys_class_name', selectedClass.className);

		grClass.query();
		if (noReturn)
			return grClass.hasNext();

		//while (grClass.next()) {
		//	retArr.push(grClass.sys_id.toString());
		//}

		return grClass.getEncodedQuery();
	},

	buildRelationshipObject: function(relFramework, sys_id) {
		var relTypes = [], classes = [], relArr = [];
		var x = 0, maxL = 0, q;
		if (relFramework.relationships && relFramework.classes) {
			maxL = relFramework.relationships.length;
			for (x; x < maxL; x++) {
				relTypes.push(relFramework.relationships[x].sys_id);
			}

			x = 0;
			maxL = relFramework.classes.length;
			for (x; x < maxL; x++) {
				classes.push(relFramework.classes[x].name);
			}

			if (!classes || !relTypes)
				return relArr;

			var grRel = new GlideRecord('cmdb_rel_ci');
			if (relFramework.parentChild == 'parent') {
				q = grRel.addQuery('parent.sys_class_name', classes[0]);
				for (x = 1; x < classes.length; x++)
					q.addOrCondition('parent.sys_class_name', classes[x]);

				grRel.addQuery('type', 'IN', relTypes.join(','));
				grRel.addQuery('child', sys_id);
			}
			else {
				q = grRel.addQuery('child.sys_class_name', classes[0]);
				for (x = 1; x < classes.length; x++)
					q.addOrCondition('child.sys_class_name', classes[x]);

				grRel.addQuery('type', 'IN', relTypes.join(','));
				grRel.addQuery('parent', sys_id);
			}

			grRel.query();
			while(grRel.next()) {
				var tmpOb = {};
				if (relFramework.parentChild == 'parent') {
					tmpOb.className = grRel.parent.sys_class_name.toString();
					tmpOb.classDisplay = grRel.parent.sys_class_name.getDisplayValue();
					tmpOb.sys_id = grRel.parent.sys_id.toString();
					tmpOb.displayValue = grRel.parent.getDisplayValue();
					tmpOb.relType = grRel.type.toString();
					tmpOb.relName = grRel.type.getDisplayValue();
				}
				else {
					tmpOb.className = grRel.child.sys_class_name.toString();
					tmpOb.classDisplay = grRel.child.sys_class_name.getDisplayValue();
					tmpOb.sys_id = grRel.child.sys_id.toString();
					tmpOb.displayValue = grRel.child.getDisplayValue();
					tmpOb.relType = grRel.type.toString();
					tmpOb.relName = grRel.type.getDisplayValue();
				}

				if (tmpOb && tmpOb.className) {
					if (this.canEditInPortal(tmpOb.sys_id, tmpOb.className)) {
						tmpOb.url = 'cmdb_editor?id=editor_home&class_name=' + tmpOb.className;
						tmpOb.url += '&sys_id=' + tmpOb.sys_id;
					}
				}

				relArr.push(tmpOb);
			}
		}
		return relArr;
	},

	_isEditable: function(className) {
		var grConfig = new GlideRecord(this.cmdbConfigurationTableName);
		grConfig.addQuery('ci_class.name', className);
		grConfig.query();

		return grConfig.hasNext();
	},

	getEditableRelationships: function(gr, relArr, thisClass) {
		var parentRelationships = [], childRelationships = [];
		if (thisClass.availableRelationships) {
			var x = 0, maxL = thisClass.availableRelationships.length;
			for (x; x < maxL; x++) {
				if (thisClass.availableRelationships[x].parentChild == 'child') {
					parentRelationships.push(this.buildRelationshipObject(thisClass.availableRelationships[x], gr.sys_id.toString()));
				}
				else
					childRelationships.push(this.buildRelationshipObject(thisClass.availableRelationships[x], gr.sys_id.toString()));
			}
		}
		return {'parent': parentRelationships, 'child': childRelationships};
	},

	buildEditableCI: function(gr, thisClass) {
		var ob = {}, tmpFldArr = [], tmpRelArr = [];
		if (thisClass.availableFields) {
			for (var x = 0; x < thisClass.availableFields.length; x++) {
				tmpFldArr.push(thisClass.availableFields[x].name);
			}
		}
		ob.editableColumns = this.getAvailableFields(gr, tmpFldArr, thisClass.className);
		ob.editableRelationships = this.getEditableRelationships(gr, tmpRelArr, thisClass);
		ob.displayName = gr.getDisplayValue();
		ob.value = gr.sys_id.toString();

		return ob;
	},

	getEditableSelection: function(sys, thisClass) {
		if (!thisClass || !thisClass.className)
			return {};

		var gr = new GlideRecord(thisClass.className);
		if (gr.get(sys)) {
			return this.buildEditableCI(gr, thisClass);
		}
		else
			return {};
	},

	loadClass: function(sys) {
		var gr = new GlideRecord(this.cmdbConfigurationTableName);
		if (gr.get(sys)) {
			return this.getConfigurationObject(gr);
		}
		else
			return {};
	},

	getFieldsForClass: function(/*optional*/ fieldRefTable) {
		if (!this._gr || !this._gr.ci_class)
			return '';

		var thisClass = this._gr.ci_class.toString(), returnArr = [], grDict = new GlideRecord('sys_dictionary'), allTables = [], chkArray = [];

		thisClass = this.getTableNameFromSys(thisClass);
		this.getAllParentTables(thisClass, allTables);
		allTables.push(thisClass);

		// 		if (this._gr.allow_extended_tables.toString() == 'true')
		// 			allTables = this.getAllChildTables(thisClass, allTables); // table names
		// 		else if (!~allTables.indexOf(thisClass))
		// 			allTables.push(thisClass);

		grDict.addQuery('name', 'IN', allTables.join(','));
		if (fieldRefTable) {
			//grDict.addQuery('reference', this.getTableSysFromName(fieldRefTable));
			grDict.addQuery('reference', fieldRefTable);
		}
		grDict.addQuery('active', true);
		grDict.query();

		while (grDict.next()) {
			if (!~chkArray.indexOf(grDict.element.toString())) {
				returnArr.push(grDict.sys_id.toString());
				chkArray.push(grDict.element.toString());
			}
		}

		return returnArr.join(',');
	},

	getTableFromName: function(name) {
		var grDBOB = new GlideRecord('sys_db_object');
		if (grDBOB.get('name', name)) {
			return grDBOB;
		}
		else
			return '';
	},

	getTableSysFromName: function(name) {
		var grDBOB = new GlideRecord('sys_db_object');
		if (grDBOB.get('name', name)) {
			return grDBOB.sys_id.toString();
		}
		else
			return '';
	},

	getTableNameFromSys: function(sys) {
		var grDBOB = new GlideRecord('sys_db_object');
		if (grDBOB.get(sys)) {
			return grDBOB.name.toString();
		}
		else
			return '';
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-20 16:07:04</sys_created_on>
        <sys_id>aeda74dedb211300ab89eb41ca9619a4</sys_id>
        <sys_mod_count>171</sys_mod_count>
        <sys_name>CMDBEditor</sys_name>
        <sys_package display_value="CMDB Editor" source="x_60289_cmdb_edito">1693bcd6db211300ab89eb41ca96196c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CMDB Editor">1693bcd6db211300ab89eb41ca96196c</sys_scope>
        <sys_update_name>sys_script_include_aeda74dedb211300ab89eb41ca9619a4</sys_update_name>
        <sys_updated_by>T13959</sys_updated_by>
        <sys_updated_on>2018-12-19 05:37:21</sys_updated_on>
    </sys_script_include>
</record_update>
